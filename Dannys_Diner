-- 1. What is the total amount each customer spent at the restaurant?

SELECT s.customer_id,
	   SUM(m.price)
FROM dannys_diner.sales AS s
  LEFT JOIN dannys_diner.menu AS m
	ON s.product_id = m.product_id
GROUP BY s.customer_id
ORDER BY s.customer_id

--Return 

customer_id	    sum
A	          76
B	          74
C	          36


-- 2. How many days has each customer visited the restaurant?

SELECT s.customer_id,
	   COUNT(DISTINCT s.order_date) AS visits
FROM dannys_diner.sales AS s
GROUP BY s.customer_id

--Return

customer_id	    visits
A	          4
B	          6
C	          2


-- 3. What was the first item from the menu purchased by each customer?
-- Because some customers ordered more than one item during their first visit, I am assuming we are considering all items on their first order as their first purchase. 
-- Therefore, some customers will have more than one item returned from this inquiry.

WITH order_info_cte AS
  (SELECT customer_id,
          order_date,
          product_name,
          DENSE_RANK() OVER(PARTITION BY s.customer_id
                            ORDER BY s.order_date) AS item_rank
   FROM dannys_diner.sales AS s
   JOIN dannys_diner.menu AS m ON s.product_id = m.product_id)
SELECT customer_id,
       product_name
FROM order_info_cte
WHERE item_rank = 1
GROUP BY customer_id,
         product_name


--Return:

customer_id	   product_name
A	             curry
A	             sushi
B	             curry
C	             ramen


-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT m.product_name AS most_popular_item,
	   COUNT (s.product_id) AS order_count
FROM dannys_diner.menu AS m
	INNER JOIN dannys_diner.sales AS s
    	ON m.product_id = s.product_id
GROUP BY m.product_name
ORDER BY order_count DESC
LIMIT 1

--Return:

most_popular_item	     order_count
ramen	                 8


-- 5. Which item was the most popular for each customer?

WITH order_info AS
(SELECT s.customer_id,
  	   m.product_name,
       COUNT(m.product_name) AS order_count,
          RANK() OVER(PARTITION BY s.customer_id
                      ORDER BY COUNT(m.product_name) DESC) AS rank_num
FROM dannys_diner.menu AS m
	INNER JOIN dannys_diner.sales AS s
   		ON m.product_id = s.product_id
GROUP BY customer_id,
         product_name)
SELECT customer_id,
	   product_name,
       order_count
FROM order_info
WHERE rank_num = 1

--Return:

customer_id	product_name	order_count
A		ramen		3
B		ramen		2
B		curry		2
B		sushi		2
C		ramen		3


-- 6. Which item was purchased first by the customer after they became a member?

WITH diner_info AS
(SELECT s.customer_id,
         s.product_id,
         s.order_date,
         m.product_name,
         c.join_date,
         DENSE_RANK() OVER(PARTITION BY s.customer_id
                              ORDER BY s.order_date) AS first_item
 FROM dannys_diner.menu m
   INNER JOIN dannys_diner.sales s
   	 ON m.product_id = s.product_id
   INNER JOIN dannys_diner.members c
   	 ON s.customer_id = c.customer_id
  WHERE order_date >= join_date )
  
  SELECT customer_id,
  		 product_name,
         join_date,
         order_date
  FROM diner_info
  WHERE first_item = 1
  
--Return:
  
  customer_id	product_name	join_date			order_date
A		curry		2021-01-07T00:00:00.000Z	2021-01-07T00:00:00.000Z
B		sushi		2021-01-09T00:00:00.000Z	2021-01-11T00:00:00.000Z


-- 7. Which item was purchased just before the customer became a member?

WITH diner_info AS
  (SELECT s.customer_id,
          s.product_id,
          s.order_date,
          m.product_name,
          c.join_date,
          DENSE_RANK() OVER(PARTITION BY s.customer_id
          	ORDER BY s.order_date DESC) AS first_item
   FROM dannys_diner.menu m
   INNER JOIN dannys_diner.sales s
   	 ON m.product_id = s.product_id
   INNER JOIN dannys_diner.members c
   	 ON s.customer_id = c.customer_id
   WHERE order_date < join_date)
SELECT customer_id,
       product_name,
       join_date,
       order_date
FROM diner_info
WHERE first_item = 1
  
--Return:
  
customer_id	product_name	join_date			order_date
A		sushi		2021-01-07T00:00:00.000Z	2021-01-01T00:00:00.000Z
A		curry		2021-01-07T00:00:00.000Z	2021-01-01T00:00:00.000Z
B		sushi		2021-01-09T00:00:00.000Z	2021-01-04T00:00:00.000Z


-- 8. What is the total items and amount spent for each member before they became a member?

SELECT c.customer_id,
	   COUNT(s.product_id) AS total_items,
       SUM(m.price) AS amount_spent
FROM dannys_diner.members AS c
	JOIN dannys_diner.sales AS s
    	ON c.customer_id = s.customer_id
    JOIN dannys_diner.menu AS m
    	ON s.product_id = m.product_id
WHERE order_date < join_date
GROUP BY c.customer_id
ORDER BY c.customer_id

--Return

customer_id	total_items	amount_spent
A		2		25
B		3		40


-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT s.customer_id,
	   SUM (CASE 
            	WHEN m.product_name = 'sushi' THEN price*20
            	ELSE price*10 END) AS customer_points
FROM dannys_diner.menu AS m
	JOIN dannys_diner.sales AS s
    	ON m.product_id = s.product_id
GROUP BY s.customer_id 
ORDER BY s.customer_id

--Return:

customer_id	customer_points
A		860
B		940
C		360

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi 
-- how many points do customer A and B have at the end of January?

SELECT c.customer_id,
	   SUM(CASE WHEN s.order_date BETWEEN c.join_date AND c.join_date +7 THEN price*10*2       --promo period with double points
                WHEN s.order_date NOT BETWEEN c.join_date AND c.join_date +7		     
                    AND m.product_name = 'sushi' THEN price*10*2			           --sushi double points any time
                WHEN s.order_date NOT BETWEEN c.join_date AND c.join_date +7
                    AND m.product_name != 'sushi' THEN price*10				           --regular point system not in promo period
          	    END) AS customer_promo_points
FROM dannys_diner.members AS c
    INNER JOIN dannys_diner.sales AS s
    	ON c.customer_id = s.customer_id
    INNER JOIN dannys_diner.menu AS m
    	ON s.product_id = m.product_id
WHERE s.order_date <='2021-01-31' 
GROUP BY c.customer_id

--Return:

customer_id	customer_promo_points
A		1370
B		940


--Bonus Questions
--Join All The Things
--The following questions are related creating basic data tables that Danny and his team can use to quickly derive insights without needing to join
--the underlying tables using SQL.

--Recreate the following table output using the available data:

customer_id	order_date	product_name	price	member
A		2021-01-01	curry		15	N
A		2021-01-01	sushi		10	N
A		2021-01-07	curry		15	Y
A		2021-01-10	ramen		12	Y
A		2021-01-11	ramen		12	Y
A		2021-01-11	ramen		12	Y
B		2021-01-01	curry		15	N
B		2021-01-02	curry		15	N
B		2021-01-04	sushi		10	N
B		2021-01-11	sushi		10	Y
B		2021-01-16	ramen		12	Y
B		2021-02-01	ramen		12	Y
C		2021-01-01	ramen		12	N
C		2021-01-01	ramen		12	N
C		2021-01-07	ramen		12	N

SELECT s.customer_id, 
       to_char(s.order_date, 'YYYY-MM-DD') AS order_date,
       m.product_name, 
       m.price,
	   CASE
 		WHEN c.join_date > s.order_date THEN 'N'
 		WHEN c.join_date <= s.order_date THEN 'Y'
 		ELSE 'N'
 		END AS member
FROM dannys_diner.sales AS s
LEFT JOIN dannys_diner.menu AS m
 ON s.product_id = m.product_id
LEFT JOIN dannys_diner.members AS c
 ON s.customer_id = c.customer_id
ORDER BY s.customer_id, s.order_date, m.product_name ASC

--Return: 

customer_id	order_date	product_name	price	member
A		2021-01-01	curry		15	N
A		2021-01-01	sushi		10	N
A		2021-01-07	curry		15	Y
A		2021-01-10	ramen		12	Y
A		2021-01-11	ramen		12	Y
A		2021-01-11	ramen		12	Y
B		2021-01-01	curry		15	N
B		2021-01-02	curry		15	N
B		2021-01-04	sushi		10	N
B		2021-01-11	sushi		10	Y
B		2021-01-16	ramen		12	Y
B		2021-02-01	ramen		12	Y
C		2021-01-01	ramen		12	N
C		2021-01-01	ramen		12	N
C		2021-01-07	ramen		12	N


--Rank All The Things
--Danny also requires further information about the ranking of customer products, but he purposely does not need 
--the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.

--Recreate the following table output using the available data:

customer_id	order_date	product_name	price	member	ranking
A		2021-01-01	curry		15	N	null
A		2021-01-01	sushi		10	N	null
A		2021-01-07	curry		15	Y	1
A		2021-01-10	ramen		12	Y	2
A		2021-01-11	ramen		12	Y	3
A		2021-01-11	ramen		12	Y	3
B		2021-01-01	curry		15	N	null
B		2021-01-02	curry		15	N	null
B		2021-01-04	sushi		10	N	null
B		2021-01-11	sushi		10	Y	1
B		2021-01-16	ramen		12	Y	2
B		2021-02-01	ramen		12	Y	3
C		2021-01-01	ramen		12	N	null
C		2021-01-01	ramen		12	N	null
C		2021-01-07	ramen		12	N	null

WITH summary_table AS
  (SELECT s.customer_id, 
         to_char(s.order_date, 'YYYY-MM-DD') AS order_date,
         m.product_name, 
         m.price,
         CASE
          WHEN c.join_date > s.order_date THEN 'N'
          WHEN c.join_date <= s.order_date THEN 'Y'
          ELSE 'N'
          END AS member
  FROM dannys_diner.sales AS s
  LEFT JOIN dannys_diner.menu AS m
   ON s.product_id = m.product_id
  LEFT JOIN dannys_diner.members AS c
   ON s.customer_id = c.customer_id
  ORDER BY s.customer_id, s.order_date, m.product_name ASC)
SELECT *,
       CASE
       	WHEN member = 'N' THEN NULL
        ELSE 
           RANK() OVER(PARTITION BY customer_id, member
                ORDER BY order_date) 
                END AS ranking
FROM summary_table

--Return
customer_id	order_date	product_name	price	member	ranking
A		2021-01-01	curry		15	N	null
A		2021-01-01	sushi		10	N	null
A		2021-01-07	curry		15	Y	1
A		2021-01-10	ramen		12	Y	2
A		2021-01-11	ramen		12	Y	3
A		2021-01-11	ramen		12	Y	3
B		2021-01-01	curry		15	N	null
B		2021-01-02	curry		15	N	null
B		2021-01-04	sushi		10	N	null
B		2021-01-11	sushi		10	Y	1
B		2021-01-16	ramen		12	Y	2
B		2021-02-01	ramen		12	Y	3
C		2021-01-01	ramen		12	N	null
C		2021-01-01	ramen		12	N	null
C		2021-01-07	ramen	12	N	null
