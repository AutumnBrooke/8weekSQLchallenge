--Begin by exploring the tables. 
SELECT *
FROM pizza_runner.customer_orders

--Return:
order_id     customer_id   pizza_id	exclusions	extras	order_time
1	     101	   1			                2020-01-01T18:05:02.000Z
2	     101	   1			                2020-01-01T19:00:52.000Z
3	     102	   1			                2020-01-02T23:51:23.000Z
3	     102	   2		                null	2020-01-02T23:51:23.000Z
4	     103	   1	     	4		        2020-01-04T13:23:46.000Z
4	     103	   1	    	4		        2020-01-04T13:23:46.000Z
4	     103	   2	        4		        2020-01-04T13:23:46.000Z
5	     104	   1	        null	        1	2020-01-08T21:00:29.000Z
6	     101	   2	        null	        null	2020-01-08T21:03:13.000Z
7	     105	   2	        null	        1	2020-01-08T21:20:29.000Z
8	     102	   1	        null	        null	2020-01-09T23:54:33.000Z
9	     103	   1	        4	        1, 5	2020-01-10T11:22:59.000Z
10	     104	   1	        null	        null	2020-01-11T18:34:49.000Z
10	     104	   1	        2, 6      	1, 4	2020-01-11T18:34:49.000Z

--We can see here there are both null and empty values. Let's replace all empty values with null values.
CREATE TEMP TABLE cust_orders AS
  SELECT order_id,
         customer_id, 
	 pizza_id, 
	 CASE
	 	WHEN exclusions = '' THEN NULL      --through exploration I found empty strings as well as null values
		WHEN exclusions = 'null' THEN NULL
			ELSE exclusions
		END AS exclusions_cleaned,
	 CASE
		WHEN extras = '' THEN NULL          --through exploration I found empty strings as well as null values
		WHEN extras = 'null' THEN NULL
		        ELSE extras
		END AS extras_cleaned,
         order_time
  FROM pizza_runner.customer_orders;
  
SELECT *
FROM cust_orders
  
--Return:
order_id     customer_id	pizza_id     exclusions_cleaned	       extras_cleaned	  order_time
1	     101	        1	     null	               null	          2020-01-01T18:05:02.000Z
2	     101	        1	     null	               null	          2020-01-01T19:00:52.000Z
3	     102	        1	     null	               null	          2020-01-02T23:51:23.000Z
3	     102	        2	     null	               null	          2020-01-02T23:51:23.000Z
4	     103	        1	     4	               	       null	          2020-01-04T13:23:46.000Z
4	     103	        1	     4	                       null	          2020-01-04T13:23:46.000Z
4	     103	        2	     4	                       null	          2020-01-04T13:23:46.000Z
5	     104	        1	     null	               1	          2020-01-08T21:00:29.000Z
6	     101	        2	     null	               null	          2020-01-08T21:03:13.000Z
7	     105	        2	     null	               1	          2020-01-08T21:20:29.000Z
8	     102	        1	     null	               null	          2020-01-09T23:54:33.000Z
9	     103	        1	     4	                       1, 5	          2020-01-10T11:22:59.000Z
10	     104	        1	     null	               null	          2020-01-11T18:34:49.000Z
10	     104	        1	     2, 6	               1, 4	          2020-01-11T18:34:49.000Z

--Now let's look at the runner_orders table.
SELECT * 
  FROM pizza_runner.runner_orders
  
--Return:
order_id     runner_id	  pickup_time	          distance	duration	cancellation
1	     1	          2020-01-01 18:15:34	  20km	     	32 minutes	
2	     1	          2020-01-01 19:10:54	  20km 		27 minutes	
3	     1	          2020-01-03 00:12:37	  13.4km	20 mins		null
4	     2	          2020-01-04 13:53:03	  23.4	     	40	        null
5	     3	          2020-01-08 21:10:57	  10	     	15	        null
6	     3	          null	                  null	     	null	        Restaurant Cancellation
7	     2	          2020-01-08 21:30:45	  25km	     	25mins	        null
8	     2	          2020-01-10 00:15:02	  23.4 km	15 minute	null
9	     2	          null	                  null	     	null	        Customer Cancellation
10	     1	          2020-01-11 18:50:20	  10km	     	10minutes	null

--First, let's start by replacing all empty and null values with NULL values as well as removing labels from distance and time columns.
CREATE TEMP TABLE runner_orders_precleaned AS
SELECT
	order_id,
	runner_id,
	CASE
		WHEN pickup_time = 'null' THEN NULL
		ELSE pickup_time
			END AS pick_up_time,
	CASE
		WHEN distance = 'null' THEN NULL
		ELSE regexp_replace(distance, '[[:alpha:]]+', '')  --this command eliminates all alphabetical characters from the string
			END AS distance_km,                                        --www.postgresqltutorial.com/postgresql-string-functions/regexp_replace/
	CASE
		WHEN duration = 'null' THEN NULL
		ELSE regexp_replace(duration, '[[:alpha:]]+', '')    --this command eliminates all alphabetical characters from the string 
			END AS duration_mins,
	CASE
		WHEN cancellation = '' THEN NULL        --through exploration I noticed that not only were there null values but also empty strings present
		WHEN cancellation = 'null' THEN NULL
		ELSE cancellation
			END AS cancellation               
FROM pizza_runner.runner_orders;

SELECT * 
FROM runner_orders_precleaned

--Return:
order_id	runner_id	pick_up_time		distance_km	duration_mins	cancellation
1		1		2020-01-01 18:15:34	20		32		null
2		1		2020-01-01 19:10:54	20		27		null
3		1		2020-01-03 00:12:37	13.4		20		null
4		2		2020-01-04 13:53:03	23.4		40		null
5		3		2020-01-08 21:10:57	10		15		null
6		3		null			null		null		Restaurant Cancellation
7		2		2020-01-08 21:30:45	25		25		null
8		2		2020-01-10 00:15:02	23.4		15		null
9		2		null			null		null		Customer Cancellation
10		1		2020-01-11 18:50:20	10		10		null

--Next, we have to change the data types of both the distance_km and duration_mins from VARCHAR to decimals and integers so we can utilize aggregate functions. 
--Let's also change the pick_up_time as a timestamp.
CREATE TEMP TABLE runner_orders_cleaned AS
SELECT order_id,
       runner_id,
       pick_up_time,
       CAST(pick_up_time AS TIMESTAMP) AS pick_up_time
       CAST(distance_km AS DECIMAL) AS distance_km,
       CAST(duration_mins AS INTEGER) AS duration_mins,
       cancellation
FROM runner_orders_precleaned;

SELECT * 
FROM runner_orders_cleaned

--Return:
order_id	runner_id	pick_up_time		distance_km	duration_mins	cancellation
1		1		2020-01-01 18:15:34	20		32		null
2		1		2020-01-01 19:10:54	20		27		null
3		1		2020-01-03 00:12:37	13.4		20		null
4		2		2020-01-04 13:53:03	23.4		40		null
5		3		2020-01-08 21:10:57	10		15		null
6		3		null			null		null		Restaurant Cancellation
7		2		2020-01-08 21:30:45	25		25		null
8		2		2020-01-10 00:15:02	23.4		15		null
9		2		null			null		null		Customer Cancellation
10		1		2020-01-11 18:50:20	10		10		null

--Notes:
--I did not remove the duplicate pizza for the order_id 4. This is because they appeared to have ordered 3 pizzas and I assumed that the duplicate was, in fact,
--just a second pizza of the same type.

--A. Pizza Metrics

--1. How many pizzas were ordered?
SELECT COUNT(order_id)
FROM cust_orders

--Return:
count
14

--2. How many unique customer orders were made?
SELECT COUNT (DISTINCT order_id)
FROM cust_orders

--Return
count
10

--3. How many successful orders were delivered by each runner?
SELECT runner_id,
       COUNT(order_id)
FROM runner_orders_cleaned
WHERE cancellation IS NULL
GROUP BY runner_id

--Return:
runner_id	count
1		4
2		3
3		1

--4. How many of each type of pizza was delivered?
SELECT p.pizza_name,
       COUNT(c.pizza_id) AS delivered_pizzas	   
FROM pizza_runner.pizza_names AS p
    JOIN cust_orders AS c
    	ON p.pizza_id = c.pizza_id
    JOIN runner_orders_cleaned AS o
    	ON c.order_id = o.order_id
WHERE cancellation IS NULL
GROUP BY p.pizza_name

--Return:
pizza_name	delivered_pizzas
Vegetarian	3
Meatlovers	9

--5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT c.customer_id,
       p.pizza_name,
       COUNT(p.pizza_id) AS number_ordered
FROM cust_orders AS c
	JOIN pizza_runner.pizza_names AS p
    	  ON c.pizza_id = p.pizza_id
GROUP BY p.pizza_name, c.customer_id
ORDER BY c.customer_id

--Return:
customer_id	pizza_name	number_ordered
101		Meatlovers	2
101		Vegetarian	1
102		Meatlovers	2
102		Vegetarian	1
103		Meatlovers	3
103		Vegetarian	1
104		Meatlovers	3
105		Vegetarian	1

--6. What was the maximum number of pizzas delivered in a single order?
SELECT c.order_id,
       COUNT(c.pizza_id) AS pizzas_ordered
FROM cust_orders AS c
       JOIN runner_orders_cleaned AS d
    	  ON c.order_id = d.order_id
WHERE cancellation IS NULL
GROUP BY c.order_id
ORDER BY pizzas_ordered DESC
LIMIT 1

--Return: 
order_id	pizzas_ordered
4		3

--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT c.customer_id,
       SUM(CASE WHEN (exclusions_cleaned IS NOT NULL OR extras_cleaned IS NOT NULL) THEN 1 ELSE 0 END) AS changes_made,
       SUM(CASE WHEN (exclusions_cleaned IS NULL AND extras_cleaned IS NULL) THEN 1 ELSE 0 END) AS no_changes_made
FROM cust_orders AS c
	JOIN runner_orders_cleaned AS d
           ON c.order_id = d.order_id
WHERE cancellation IS NULL
GROUP BY c.customer_id
ORDER BY c.customer_id

--Return:
customer_id	changes_made	no_changes_made
101		0		2
102		0		3
103		3		0
104		2		1
105		1		0

--8. How many pizzas were delivered that had both exclusions and extras?

SELECT SUM(CASE WHEN (exclusions_cleaned IS NOT NULL AND extras_cleaned IS NOT NULL) THEN 1 ELSE 0 END) AS exclusions_and_extras  
FROM cust_orders AS c
	JOIN runner_orders_cleaned AS d
           ON c.order_id = d.order_id
WHERE cancellation IS NULL

--Return:
exclusions_and_extras
1

--9. What was the total volume of pizzas ordered for each hour of the day?
SELECT EXTRACT(HOUR FROM order_time) AS hour,
	   COUNT(order_id) AS orders
FROM cust_orders
GROUP BY hour
ORDER BY hour ASC

--Return:
hour	orders
11	1
13	3
18	3
19	1
21	3
23	3

--10. What was the volume of orders for each day of the week?
WITH  order_volume AS
(SELECT
	COUNT(order_id) AS order_count,
	EXTRACT(dow FROM order_time) AS day
FROM cust_orders
GROUP BY day
ORDER BY day)
SELECT CASE WHEN day = 0 THEN 'SUNDAY'
	    WHEN day = 1 THEN 'MONDAY'
            WHEN day = 2 THEN 'TUESDAY'
            WHEN day = 3 THEN 'WEDNESDAY'
            WHEN day = 4 THEN 'THURSDAY'
            WHEN day = 5 THEN 'FRIDAY'
            WHEN day = 6 THEN 'SATURDAY'
            END AS DOW,
            order_count
FROM order_volume

--Return:
dow		order_count
WEDNESDAY	5
THURSDAY	3
FRIDAY		1
SATURDAY	5


--B. Runner and Customer Experience

--1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)
SELECT to_char(registration_date, 'WW') as  signup_week, 
       COUNT(runner_id)
FROM pizza_runner.runners
GROUP BY signup_week
ORDER BY signup_week;

--Return:
signup_week	count
01		2
02		1
03		1

--2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?
SELECT r.runner_id,
       AVG(DATE_PART('minute', r.pick_up_time - c.order_time)) AS runner_time_to_pickup
FROM runner_orders_cleaned AS r
	INNER JOIN cust_orders AS c
    	   ON r.order_id = c.order_id
GROUP BY runner_id
ORDER BY runner_id

--Return:
runner_id	runner_time_to_pickup
1		15.333333333333334
2		23.4
3		10

--3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
--The data for prep time isn't explicitly laid out, so we can only infer that the prep time is the time difference between the order time and the runner pickup time.
WITH pizza_count AS
 (SELECT c.order_id,                                                         --First we'll find how many pizzas are per order and the prep time for each order
 	 COUNT(c.pizza_id) AS pizzas_ordered,
        (DATE_PART('minute', r.pick_up_time - c.order_time)) AS prep_time
  FROM cust_orders AS c
  	INNER JOIN runner_orders_cleaned AS r
    	   ON c.order_id = r.order_id
  WHERE r.cancellation IS NULL
  GROUP BY c.order_id, r.pick_up_time, c.order_time)

SELECT pizzas_ordered,                                      --From here, we'll figure out the prep time per pizza by dividing the prep time by # or pizzas ordered
       prep_time/pizzas_ordered AS prep_per_pizza
FROM pizza_count
ORDER BY prep_per_pizza 

--Return:
pizzas_ordered	prep_per_pizza
2		7.5
3		9.666666666666666
1		10
1		10
1		10
1		10
2		10.5
1		20

--We consistently see the prep time for one pizza around 10 minutes. It appears that as we add more pizzas our prep time actually goes down per pizza, presumably 
--because our staff can prepare them at the same time or side by side. Because we don't have any orders with more than 3 pizzas, it's hard to say where the tipping
--point is, though. For now, it seems 2 pizzas is the sweet spot where we are able to maximize our efforts.

--4. What was the average distance travelled for each customer?
SELECT c.customer_id,
       AVG(r.distance_km) AS avg_cust_distance
FROM cust_orders AS c
	INNER JOIN runner_orders_cleaned AS r
    	   ON c.order_id = r.order_id
GROUP BY c.customer_id
ORDER BY c.customer_id

--Return:
customer_id	avg_cust_distance
101		20.0000000000000000
102		16.7333333333333333
103		23.4000000000000000
104		10.0000000000000000
105		25.0000000000000000

--5. What was the difference between the longest and shortest delivery times for all orders?
SELECT MAX(duration_mins)-MIN(duration_mins) AS duration_difference
FROM runner_orders_cleaned

--Return:
duration_difference
30

--6. What was the average speed for each runner for each delivery and do you notice any trend for these values?
--Speed indicates rate of travel, so let's find the speed with which each runner traveled for each order
SELECT runner_id,
	   distance_km,
	   order_id,
	   ((distance_km/duration_mins)*60) AS KPH_per_order
FROM runner_orders_cleaned
WHERE cancellation IS NULL
ORDER BY runner_id, distance_km


--Return:
runner_id	distance_km	order_id	kph_per_order
1		10		10		60.00000000000000000000
1		13.4		3		40.20000000000000000000
1		20		1		37.50000000000000000000
1		20		2		44.44444444444444444440
2		23.4		8		93.6000000000000000
2		23.4		4		35.10000000000000000000
2		25		7		60.00000000000000000000
3		10		5		40.00000000000000000020

--Now let's look at their average speed

SELECT runner_id,
	   AVG((distance_km/duration_mins)*60) AS AVG_KPH
FROM runner_orders_cleaned
WHERE cancellation IS NULL
GROUP BY runner_id
ORDER BY runner_id

--Return:
runner_id	avg_kph
1		45.53611111111111111110
2		62.90000000000000000000
3		40.00000000000000000020

--Distance doesn't seem to play that much of a factor in rate of travel. It appears runner 2 had an issue with order 8 driving up his rate average greatly, 
--otherwise he would have been on par with the other runners.

--7. What is the successful delivery percentage for each runner?
WITH delivery_count AS
	(SELECT runner_id,
     		SUM(CASE
     			WHEN cancellation IS NULL THEN 1
     				ELSE 0 
     					END) AS delivered,
     		SUM(CASE
     			WHEN cancellation IS NOT NULL THEN 1
     				ELSE 0
     					END) AS cancelled
     	 FROM runner_orders_cleaned
     	 GROUP BY runner_id)
 SELECT runner_id,
 	100*(CAST((delivered) as decimal(7,2))/CAST((delivered + cancelled) AS decimal(7,2))) AS percentage_delivered
 FROM delivery_count
 GROUP BY runner_id, delivered, cancelled
 ORDER BY runner_id
 
 --Return:
 runner_id	percentage_delivered
1		100.00000000000000000000
2		75.00000000000000000000
3		50.00000000000000000000


--C. Ingredient Optimisation

--1. What are the standard ingredients for each pizza?
--2. What was the most commonly added extra?
--3. What was the most common exclusion?
--4. Generate an order item for each record in the customers_orders table in the format of one of the following:
     --Meat Lovers
     --Meat Lovers - Exclude Beef
     --Meat Lovers - Extra Bacon
     --Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
--5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and 
     --add a 2x in front of any relevant ingredients
     --For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
--6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?


--D. Pricing and Ratings

--1. If a Meat Lovers pizza costs $12 and Vegetarian costs $10 and there were no charges for changes - how much money has Pizza Runner made so far if there are no delivery fees?
--2. What if there was an additional $1 charge for any pizza extras?
     --Add cheese is $1 extra
--3. The Pizza Runner team now wants to add an additional ratings system that allows customers to rate their runner, how would you design an additional table for this new dataset - generate a schema for this new table and insert your own data for ratings for each successful customer order between 1 to 5.
--4. Using your newly generated table - can you join all of the information together to form a table which has the following information for successful deliveries?
     --customer_id
     --order_id
     --runner_id
     --rating
     --order_time
     --pickup_time
     --Time between order and pickup
     --Delivery duration
     --Average speed
     --Total number of pizzas
--5. If a Meat Lovers pizza was $12 and Vegetarian $10 fixed prices with no cost for extras and each runner is paid $0.30 per kilometre traveled - 
     --how much money does Pizza Runner have left over after these deliveries?
     
     
-E. Bonus Questions
--If Danny wants to expand his range of pizzas - how would this impact the existing data design? Write an INSERT statement to demonstrate what would happen 
--if a new Supreme pizza with all the toppings was added to the Pizza Runner menu?
